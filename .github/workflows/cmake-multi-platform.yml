# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  check_run:
    branches: [ "master" ]
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            cmake_generator: Ninja
            cmake_flags: "-DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++"
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            cmake_generator: "Ninja"
            cmake_flags: "-DCMAKE_C_COMPILER=cl -DCMAKE_CXX_COMPILER=cl"
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
            cmake_generator: Ninja
            cmake_flags: "-DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++"

  
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup CMake and Ninja
      uses: ashutoshvarma/setup-ninja@master # This action also installs CMake
      with:
        version: 1.13.1 # Specify Ninja version 1.13.1

#    - name: Download and Install CMake 4.1.0
#      run: |
#        CMAKE_VERSION="4.1.0"
#        CMAKE_URL="https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-linux-x86_64.tar.gz"
#        mkdir -p "${RUNNER_TEMP}/cmake"
#        curl -sSL "${CMAKE_URL}" | tar -xz -C "${RUNNER_TEMP}/cmake" --strip-components=1
#        echo "${RUNNER_TEMP}/cmake/bin" >> $GITHUB_PATH
          
    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}
        -G ${{matrix.cmake_generator}}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
