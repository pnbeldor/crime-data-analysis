# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  check_run:
    branches: [ "master" ]
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        #os: [ubuntu-latest, windows-latest, macos-latest]
        os: [ubuntu-latest, macos-latest]
        build_type: [Release]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            cmake_generator: Ninja
            cmake_flags: "-DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON"
            c_flags: -Wall -Wextra -Wpedantic
            cxx_flags: -Wall -Wextra -Wpedantic
          #- os: windows-latest
          # c_compiler: cl
          #  cpp_compiler: cl
          #  cmake_generator: "Ninja"
          #  c_flags: /W4
          #  cxx_flags: /W4
          #  cmake_flags: "-DCMAKE_C_COMPILER=cl -DCMAKE_CXX_COMPILER=cl -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON"
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
            cmake_generator: Ninja
            cmake_flags: "-DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON"
            c_flags: -Wall -Wextra -Wpedantic
            cxx_flags: -Wall -Wextra -Wpedantic

  
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup CMake and Ninja
      uses: ashutoshvarma/setup-ninja@master # This action also installs CMake
      with:
        version: 1.13.1 # Specify Ninja version 1.13.1

    - name: Set up CMake
      uses: jwlawson/actions-setup-cmake@v1.14 # Use a specific version for stability
      with:
        cmake-version: 4.1.1

    - name: Clone jsoncpp
      run: git clone https://github.com/open-source-parsers/jsoncpp.git

    - name: Build jsoncpp
      working-directory: jsoncpp
      run: |
        mkdir build
        cd build
        cmake ..
        cmake --build . --target install
        
    - name: Install jsoncpp
      working-directory: jsoncpp/build
      run: make install DESTDIR=${GITHUB_WORKSPACE}/jsoncpp_install
  
    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_C_FLAGS=${{ matrix.c_flags }}
        -DCMAKE_CXX_FLAGS=${{ matrix.cxx_flags }}
        -DJSONCPP_INCLUDE_DIR=${{ github.workspace }}/jsoncpp_install/include
        -DJSONCPP_LIBRARY=${{ github.workspace }}/jsoncpp_install/lib/libjsoncpp.a
        -S ${{ github.workspace }}
        -G ${{matrix.cmake_generator}}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
