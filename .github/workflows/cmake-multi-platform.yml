# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Crime Data Analysis

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  BUILD_TYPE: Release
  CC: gcc
  CXX: g++

jobs:
  build-and-test:
    name: Build and Test (${{matrix.os}}, ${{ matrix.compiler }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        #os: [ubuntu-latest, windows-latest, macos-latest]
        os: [ubuntu-latest macos-latest]
        compiler: [gcc, clang]
        build_type: [Release]
        
        include:
          - config: [name: "Multiplatform build system"]
          - os: ubuntu-latest
            compiler: gcc
            c_compiler: gcc
            cpp_compiler: g++
            cmake_generator: Ninja
            cmake_flags: "-DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON"
            c_flags: -Wall -Wextra -Wpedantic
            cxx_flags: -Wall -Wextra -Wpedantic
          - os: ubuntu-latest
            compiler: clang
            c_compiler: clang
            cpp_compiler: clang++
            cmake_generator: Ninja
            cmake_flags: "-DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON"
            c_flags: -Wall -Wextra -Wpedantic
            cxx_flags: -Wall -Wextra -Wpedantic
          - os: macos-latest
            compiler: clang
            c_compiler: clang
            cpp_compiler: clang++
            cmake_generator: Ninja
            cmake_flags: "-DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON"
            c_flags: -Wall -Wextra -Wpedantic
            cxx_flags: -Wall -Wextra -Wpedantic

        exclude:
          - os: macos-latest
            compiler: gcc
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Install Linux Dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          libjsoncpp-dev \
          libcurl4-openssl-dev \
          libmongoc-dev \
          libbson-dev \
          libgtest-dev \
          googletest \
          lcov \
          curl

    - name: Install macOS Dependencies
      if: matrix.os == 'macos-latest'
      run: |
        brew update
        brew install \
          cmake \
          jsoncpp \
          curl \
          mongo-c-driver \
          googletest \
          lcov

    - name: Set up GCC
      if: matrix.compiler == 'gcc' && matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get install -y gcc-11 g++-11
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 100
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-11 100

    - name: Set up Clang
      if: matrix.compiler == 'clang'
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt-get install -y clang-14 clang++-14
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-14 100
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-14 100
        fi


    - name: Setup CMake and Ninja
      uses: ashutoshvarma/setup-ninja@master # This action also installs CMake
      with:
        version: 1.13.1 # Specify Ninja version 1.13.1

    - name: Set up CMake
      uses: jwlawson/actions-setup-cmake@v1.14 # Use a specific version for stability
      with:
        cmake-version: 4.1.1

    - name: Clone jsoncpp
      run: git clone https://github.com/open-source-parsers/jsoncpp.git

    - name: Build jsoncpp
      working-directory: jsoncpp
      run: |
        mkdir build
        cd build
        cmake ..
        cmake --build . 

    # - name: Install jsoncpp
    #   working-directory: jsoncpp/build
    #   run: make install DESTDIR=${GITHUB_WORKSPACE}/jsoncpp

    # - name: Add custom directory to PATH
    #   shell: bash
    #   run: |
    #     echo "${GITHUB_WORKSPACE}/jsoncpp/usr/local/include/" >> $GITHUB_PATH
    #     echo "${GITHUB_WORKSPACE}/jsoncpp/usr/local/lib" >> $GITHUB_PATH
    #     echo "${GITHUB_WORKSPACE}/jsoncpp/usr/local/lib/" >> $GITHUB_PATH
  
    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_C_FLAGS=${{ matrix.c_flags }}
        -DCMAKE_CXX_FLAGS=${{ matrix.cxx_flags }}
        -DBUILD_TESTS=ON
        -DENABLE_COVERAGE=${{matrix.os == 'ubuntu-latest'}}
        -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/jsoncpp_install/usr/local/lib
        -S ${{ github.workspace }}
        -G ${{matrix.cmake_generator}}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: |
        cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ env.BUILD_TYPE }} --parallel 4

    - name: Run Tests
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: |
        ctest --build-config ${{ matrix.build_type }} --output-on-failure --parallel 4
